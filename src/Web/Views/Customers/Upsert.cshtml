@{
    ViewData["Title"] = "Upsert Customer";
}

<div id="appDiv">
    <v-app>
        <partial name="~/Views/Shared/_Alert.cshtml" />

        <v-card>

            

            

            <v-container>

                <v-tabs>
                    <v-tab>Customer</v-tab>
                    <v-tab v-if="model.id.length > 0">Contacts</v-tab>
                    <v-tab v-if="model.id.length > 0">Tickets</v-tab>

                    <v-tab-item>
                        <v-form v-model="valid" ref="form" lazy-validation>

                            <v-text-field v-model="model.name"
                                          :rules="nameRules"
                                          :counter="100"
                                          label="Name">
                            </v-text-field>

                            <v-text-field v-model="model.address1"
                                          :rules="address1Rules"
                                          :counter="100"
                                          label="Address 1">
                            </v-text-field>

                            <v-text-field v-model="model.address2"
                                          :counter="100"
                                          label="Address 2">
                            </v-text-field>

                            <v-text-field v-model="model.city"
                                          :rules="cityRules"
                                          :counter="100"
                                          label="City">
                            </v-text-field>

                            <v-text-field v-model="model.state"
                                          :counter="50"
                                          label="State">
                            </v-text-field>

                            <v-text-field v-model="model.zip"
                                          :rule="zipRules"
                                          :counter="50"
                                          label="Zip">
                            </v-text-field>

                            <v-text-field v-model="model.country"
                                          :counter="50"
                                          label="Country">
                            </v-text-field>

                            <v-text-field v-model="model.phone"
                                          :rules="phoneRules"
                                          :counter="50"
                                          label="Phone">
                            </v-text-field>

                            <v-btn color="primary"
                                   class="mr-4"
                                   v-on:click="save"
                                   :disabled="isBusy">Save</v-btn>

                        </v-form>
                    </v-tab-item>
                    <v-tab-item v-if="model.id.length > 0">
                        contacts
                    </v-tab-item>
                    <v-tab-item v-if="model.id.length > 0">
                        tickets
                    </v-tab-item>
                </v-tabs>


                
            </v-container>
        </v-card>

    </v-app>
</div>

<script>
    new Vue({
        el: '#appDiv',
        vuetify: new Vuetify(),
        data: {
            model: {
                id: '',
                name: '',
                address1: '',
                address2: '',
                city: '',
                state: '',
                zip: '',
                country: '',
                phone: ''
            },
            nameRules: [
                v => !!v || 'Name is required',
                v => v.length <= 100 || 'Name must be less than 101 characters'
            ],
            address1Rules: [
                v => !!v || 'Address 1 is required',
                v => v.length <= 100 || 'Address 1 must be less than 101 characters'
            ],
            cityRules: [
                v => !!v || 'City is required',
                v => v.length <= 100 || 'City must be less than 101 characters'
            ],
            zipRules: [
                v => !!v || 'Zip is required',
                v => v.length <= 50 || 'Zip must be less than 51 characters'
            ],
            phoneRules: [
                v => !!v || 'Phone is required',
                v => v.length <= 50 || 'Phone must be less than 51 characters'
            ],
            valid: false,
            isBusy: false,
            showAlert: false,
            alertMsg: "",
            alertColor: '',
            alertTimeout: 6000,

            // contacts
            items: [],
            totalItems: 0,
            loading: false,
            options: {
                page: 1,
                itemPerPage: 10,
                sortBy: ['firstName'],
                sortDesc: [false],
                groupBy: [],
                groupDesc: [],
                multiSort: false,
                mustSort: false,
                search: ''
            },
            headers: [
                { text: 'First Name', value: 'firstName' },
                { text: 'Last Name', value: 'lastName' },
                { text: 'Title', value: 'title' },
                { text: 'Email', value: 'email' },
                { text: 'Phone', value: 'Phone' },
                { text: 'Action', value: 'action', sortable: false }
            ]
        },
        computed: {

        },
        watch: {
            options: {
                handler() {
                    this.getData();
                }
            },

        },
        created() {
            var href = location.href;
            var temp = href.split('/');
            var last = temp[temp.length - 1];

            if (last.toLowerCase() != 'upsert') {
                this.load(last)
            }
        },
        methods: {

            load(id) {
                axios
                    .get('@Url.Action("GetData", "Customers")' + '?id=' + id)
                    .then(response => {
                        if (response.data) {
                            console.log('load', response.data);
                            this.model = response.data.result;
                        }
                    });
            },

            save(e) {
                this.isBusy = true;
                e.preventDefault();
                var vm = this;

                axios.post('@Url.Action("UpsertData", "Customers")', this.model)
                    .then(function (response) {
                        
                        if (response.data.result != null) {
                            vm.alertColor = "success";
                            vm.alertMsg = "Saved";
                            vm.alertTimeout = 6000;
                            vm.showAlert = true;
                                                        
                            // redirect to index page
                            var url = location.href.replace('/Upsert', '');
                            window.location.href = url;
                        }
                        else {
                            vm.alertColor = "purple";
                            vm.alertMsg = "Error";
                            vm.alertTimeout = 6000;
                            vm.showAlert = true;
                        }
                    })
                    .catch(function (error) {
                        console.log(error);
                        vm.alertColor = "purple";
                        vm.alertMsg = "Error";
                        vm.alertTimeout = 6000;
                        vm.showAlert = true;

                    })
                    .finally(() => this.isBusy = false)
            },


        }
    })
</script>

