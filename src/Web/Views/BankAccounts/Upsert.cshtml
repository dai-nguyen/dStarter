@{
    ViewData["Title"] = "Bank Account";

    var id = Url.ActionContext.RouteData.Values["id"];
}

<partial name="~/Views/BankAccounts/_BankAccountTransactionsComponent.cshtml" />

<div id="appDiv">
    <v-app>
        <v-card>
            <v-container>

                <v-form v-model="valid" ref="form" lazy-validation>
                     
                    <v-text-field v-model="model.name"
                              :rules="nameRules"
                              :counter="50"
                              label="Name"
                              :disabled="model.id > -1"
                              required>
                    </v-text-field>

                    <v-select :items="types"
                          v-model="model.type"
                          item-text="name"
                          item-value="name"                          
                          label="Type">

                    <v-text-field v-model="model.amount"                              
                              label="Amount"
                              :disabled="model.id > -1"
                              required>
                    </v-text-field>

                </v-form>

            </v-container>
        </v-card>
    </v-app>
</div>

<script>
     new Vue({
        el: '#appDiv',
        vuetify: new Vuetify(),
        data: {
            model: {
                id: '',
                name: '',
                address1: '',
                address2: '',
                city: '',
                state: '',
                zip: '',
                country: '',
                phone: ''
            },
            nameRules: [
                v => !!v || 'Name is required',
                v => v.length <= 100 || 'Name must be less than 101 characters'
            ],            
            valid: false,
            isBusy: false,
            showAlert: false,
            alertMsg: "",
            alertColor: '',
            alertTimeout: 6000,

            
        },
        computed: {

        },
        watch: {
            options: {
                handler() {
                    this.getData();
                }
            },

        },
        created() {                        
            var id = '@id';

            if (id.length > 0) {
                this.model.id = id;
                this.load(id);
            }
        },
        methods: {

            load(id) {
                axios
                    .get('@Url.Action("GetData", "BankAccounts")' + '?id=' + id)
                    .then(response => {
                        if (response.data) {
                            console.log('load', response.data);
                            this.model = response.data.result;
                        }
                    });
            },

            save(e) {
                this.isBusy = true;
                e.preventDefault();
                var vm = this;

                axios.post('@Url.Action("UpsertData", "BankAccounts")', this.model)
                    .then(function (response) {
                        
                        if (response.data.result != null) {
                            vm.alertColor = "success";
                            vm.alertMsg = "Saved";
                            vm.alertTimeout = 6000;
                            vm.showAlert = true;
                                                        
                            // redirect to index page
                            var url = location.href.replace('/Upsert', '');
                            window.location.href = url;
                        }
                        else {
                            vm.alertColor = "purple";
                            vm.alertMsg = "Error";
                            vm.alertTimeout = 6000;
                            vm.showAlert = true;
                        }
                    })
                    .catch(function (error) {
                        console.log(error);
                        vm.alertColor = "purple";
                        vm.alertMsg = "Error";
                        vm.alertTimeout = 6000;
                        vm.showAlert = true;

                    })
                    .finally(() => this.isBusy = false)
            },


        }
    })
</script>