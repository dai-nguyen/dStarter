@{
    ViewData["Title"] = "Users";
}

<div id="appDiv">
    <v-app>
        <v-snackbar v-model="showAlert"
                    :top="true"
                    :right="true"
                    :color="alertColor"
                    :timeout="alertTimeout">
            {{ alertMsg }}
            <v-btn dark
                   text
                   v-on:click="showAlert = false">
                Close
            </v-btn>
        </v-snackbar>

        <v-data-table :headers="headers"
                      :items="items"
                      :options.sync="options"
                      :server-items-length="totalItems"
                      :loading="loading" 
                      class="elevation-1">

            <template v-slot:top>
                <v-toolbar flat color="white">
                    <v-toolbar-title>Custom Attribute Definitions</v-toolbar-title>
                    <v-divider class="mx-4" insert vertical></v-divider>
                    <v-spacer></v-spacer>

                    <partial name="~/Views/CustomAttributeDefinitions/_CustomAttributeDefinition.cshtml" />

                </v-toolbar>
            </template>

            <template v-slot:item.action="{ item }">
                <v-icon small class="mr-2" v-on:click="editItem(item)">mdi-pencil</v-icon>
                <v-icon small v-on:click="deleteItem(item)">mdi-delete</v-icon>
            </template>
            <template v-slot:no-data>
                <v-btn color="primary" v-on:click="getData()">Reset</v-btn>
            </template>
        </v-data-table>
    </v-app>
</div>

<script>
    new Vue({
        el: '#appDiv',
        vuetify: new Vuetify(),
        data() {
            return {
                showPassword: false,
                items: [],
                totalItems: 0,
                loading: true,
                showAlert: false,
                alertMsg: "",
                alertColor: '',
                alertTimeout: 6000,
                options: {
                    page: 1,
                    itemPerPage: 10,
                    sortBy: ['objectName'],
                    sortDesc: [false],
                    groupBy: [],
                    groupDesc: [],
                    multiSort: false,
                    mustSort: false
                },
                headers: [
                    { text: 'Entity', value: 'objectName' },
                    { text: 'Name', value: 'name' },
                    { text: 'Display Name', value: 'displayName' },
                    { text: 'Data Type', value: 'dataType' },
                    { text: 'Action', value: 'action', sortable: false }
                ],
                valid: false,
                dialog: false,
                editedIndex: -1,
                editedItem: {
                    objectName: '',
                    name: '',
                    displayName: '',
                    dataType: ''
                },
                defaultItem: {
                    objectName: '',
                    name: '',
                    displayName: '',
                    dataType: ''
                },
                objectNames: [],
                dataTypes: []
            }
        },
        computed: {
            formTitle() {
                return this.editedIndex === -1 ? 'New Definition' : 'Edit Definition';
            }
        },
        watch: {
            options: {
                handler() {
                    this.getData();
                    this.getObjectNames();
                    this.getDataTypes();
                }
            },
            dialog(val) {

                val || this.close();
            }
        },
        created() {
            //this.getData();
        },
        methods: {

            getData () {
                this.loading = true;
                axios
                    .post('@Url.Action("LoadData", "CustomAttributeDefinitions")', this.options)
                    .then(response => {
                        this.items = response.data.result.data;
                        this.totalItems = response.data.result.total;
                        this.loading = false;
                        //console.log(response.data.result.data);
                    });
            },

            editItem (item) {
                this.editedIndex = this.items.indexOf(item);
                //this.editedItem = Object.assign({}, item);
                //this.dialog = true;

                axios
                    .get('@Url.Action("GetData", "CustomAttributeDefinitions")/' + item.id)
                    .then(response => {
                        //console.log('editedItem', response.data);

                        if (response.data.result != null) {
                            this.editedItem = Object.assign({}, response.data.result);
                            this.dialog = true;
                        }
                    });
            },

            getObjectNames() {
                axios
                    .get('@Url.Action("ObjectNames", "CustomAttributeDefinitions")')
                    .then(res => {
                        if (res.data.result != null) {
                            this.objectNames = res.data.result;
                        }
                    });
            },

            getDataTypes() {
                axios
                    .get('@Url.Action("DataTypes", "CustomAttributeDefinitions")')
                    .then(res => {
                        if (res.data.result != null) {
                            this.dataTypes = res.data.result;
                        }
                    });
            },

            deleteItem (item) {
                //const index = this.items.indexOf(item);
                if (confirm('Are you sure you want to delete this user?')) {
                    var vm = this;

                    axios.delete('@Url.Action("Delete", "Users")/' + item.id)
                        .then(function (response) {
                            console.log(response);

                            if (response.data.result) {
                                vm.alertColor = "success";
                                vm.alertMsg = "Saved";
                                vm.alertTimeout = 6000;
                                vm.showAlert = true;

                                vm.getData();
                            }
                            else {
                                vm.alertColor = "purple";
                                vm.alertMsg = "Error";
                                vm.alertTimeout = 6000;
                                vm.showAlert = true;
                            }
                        });
                }
            },

            close () {
                this.dialog = false;
                setTimeout(() => {
                    this.editedItem = Object.assign({}, this.defaultItem);
                    this.editedIndex = -1;
                }, 300)
            },

            save (e) {
                e.preventDefault();
                var vm = this;

                axios.post('@Url.Action("Upsert", "CustomAttributeDefinitions")', this.editedItem)
                    .then(function (response) {
                        vm.editedIndex = -1;

                        if (response.data.result != null) {
                            vm.alertColor = "success";
                            vm.alertMsg = "Saved";
                            vm.alertTimeout = 6000;
                            vm.showAlert = true;
                            vm.close();

                            vm.getData();
                        }
                        else {
                            vm.alertColor = "purple";
                            vm.alertMsg = "Error";
                            vm.alertTimeout = 6000;
                            vm.showAlert = true;
                        }
                    })
                    .catch(function (error) {
                        console.log(error);
                        vm.alertColor = "purple";
                        vm.alertMsg = "Error";
                        vm.alertTimeout = 6000;
                        vm.showAlert = true;
                    })
                vm.getData();
            },
        }
    })
</script>