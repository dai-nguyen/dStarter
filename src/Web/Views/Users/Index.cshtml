@{
    ViewData["Title"] = "Users";
}

<div id="appDiv">
    <v-app>
        <v-snackbar v-model="showAlert"
                    :top="true"
                    :right="true"
                    :color="alertColor"
                    :timeout="alertTimeout">
            {{ alertMsg }}
            <v-btn dark
                   text
                   v-on:click="showAlert = false">
                Close
            </v-btn>
        </v-snackbar>

        <v-card>
            <v-card-title>
                Users
                <v-spacer></v-spacer>
                <v-text-field v-model="options.search"
                              append-icon="mdi-magnify"
                              label="Search"
                              single-line
                              hide-details></v-text-field>
            </v-card-title>
            <v-data-table :headers="headers"
                          :items="items"
                          :options.sync="options"
                          :server-items-length="totalItems"
                          :loading="loading"
                          class="elevation-1">

                <template v-slot:top>
                    <v-toolbar flat color="white">
                        <v-toolbar-title></v-toolbar-title>
                        @*<v-divider class="mx-4" insert vertical></v-divider>*@
                        <v-spacer></v-spacer>

                        <partial name="~/Views/Users/_User.cshtml" />

                    </v-toolbar>
                </template>

                <template v-slot:item.action="{ item }">
                    <v-icon small class="mr-2" v-on:click="editItem(item)">mdi-pencil</v-icon>
                    <v-icon small v-on:click="deleteItem(item)">mdi-delete</v-icon>
                </template>
                <template v-slot:no-data>
                    <v-btn color="primary" v-on:click="getData()">Reset</v-btn>
                </template>
            </v-data-table>
        </v-card>

        
    </v-app>
</div>

<script>
    new Vue({
        el: '#appDiv',
        vuetify: new Vuetify(),
        data() {
            return {
                showPassword: false,
                items: [],
                totalItems: 0,
                loading: true,
                showAlert: false,
                alertMsg: "",
                alertColor: '',
                alertTimeout: 6000,
                options: {
                    page: 1,
                    itemPerPage: 10,
                    sortBy: ['userName'],
                    sortDesc: [false],
                    groupBy: [],
                    groupDesc: [],
                    multiSort: false,
                    mustSort: false,
                    search: ''
                },
                headers: [
                    { text: 'User Name', value: 'userName' },
                    { text: 'Email', value: 'email' },
                    { text: 'First Name', value: 'firstName' },
                    { text: 'Last Name', value: 'lastName' },
                    { text: 'Action', value: 'action', sortable: false }
                ],
                valid: false,
                dialog: false,
                editedIndex: -1,
                editedItem: {
                    userName: '',
                    firstName: '',
                    lastName: '',
                    email: '',
                    attributes: [],
                    roles: []
                },
                defaultItem: {
                    userName: '',
                    firstName: '',
                    lastName: '',
                    email: '',
                    attributes: [],
                    roles: []
                },
                userNameRules: [
                    v => !!v || 'UserName is required',
                    v => v.length <= 50 || 'User Name must be less than 51 characters'
                ],
                passwordRules: [
                    v => !!v || 'Password is required',
                    v => v.length <= 50 || 'Password must be less than 51 characters'
                ],
                firstNameRules: [
                    v => !!v || 'First Name is required',
                    v => v.length <= 50 || 'First Name must be less than 51 characters'
                ],
                lastNameRules: [
                    v => !!v || 'Last Name is required',
                    v => v.length <= 50 || 'Last Name must be less than 51 characters'
                ],
                emailRules: [
                    v => !!v || 'Email is required',
                    v => v.length <= 50 || 'Email must be less than 51 characters'
                ],
                editedAttr: null,
                roles: []
            }
        },
        computed: {
            formTitle() {
                return this.editedIndex === -1 ? 'New User' : 'Edit User';
            }
        },
        watch: {
            options: {
                handler() {
                    this.getData();
                    this.getRoles();
                }
            },
            dialog(val) {

                val || this.close();
            }
        },
        created() {
            //this.getData();
        },
        methods: {

            getData () {
                this.loading = true;
                axios
                    .post('@Url.Action("LoadData", "Users")', this.options)
                    .then(response => {
                        this.items = response.data.result.data;
                        this.totalItems = response.data.result.total;
                        this.loading = false;
                        //console.log(response.data.result.data);
                    });
            },

            editItem (item) {
                this.editedIndex = this.items.indexOf(item);
                //this.editedItem = Object.assign({}, item);
                //this.dialog = true;

                axios
                    .get('@Url.Action("GetData", "Users")/' + item.id)
                    .then(response => {
                        //console.log('editedItem', response.data);

                        if (response.data.result != null) {
                            this.editedItem = Object.assign({}, response.data.result);
                            this.dialog = true;
                        }
                    });
            },

            getRoles() {
                axios
                    .get('@Url.Action("Roles", "Roles")')
                    .then(res => {
                        if (res.data.result != null) {
                            this.roles = res.data.result;
                        }
                    });
            },

            deleteItem (item) {
                //const index = this.items.indexOf(item);
                if (confirm('Are you sure you want to delete this user?')) {
                    var vm = this;

                    axios.delete('@Url.Action("Delete", "Users")/' + item.id)
                        .then(function (response) {
                            console.log(response);

                            if (response.data.result) {
                                vm.alertColor = "success";
                                vm.alertMsg = "Saved";
                                vm.alertTimeout = 6000;
                                vm.showAlert = true;

                                vm.getData();
                            }
                            else {
                                vm.alertColor = "purple";
                                vm.alertMsg = "Error";
                                vm.alertTimeout = 6000;
                                vm.showAlert = true;
                            }
                        });
                }
            },

            close () {
                this.dialog = false;
                setTimeout(() => {
                    this.editedItem = Object.assign({}, this.defaultItem);
                    this.editedIndex = -1;
                }, 300)
            },

            save (e) {
                e.preventDefault();
                var vm = this;

                axios.post('@Url.Action("Upsert", "Users")', this.editedItem)
                    .then(function (response) {
                        vm.editedIndex = -1;

                        if (response.data.result != null) {
                            vm.alertColor = "success";
                            vm.alertMsg = "Saved";
                            vm.alertTimeout = 6000;
                            vm.showAlert = true;
                            vm.close();

                            vm.getData();
                        }
                        else {
                            vm.alertColor = "purple";
                            vm.alertMsg = "Error";
                            vm.alertTimeout = 6000;
                            vm.showAlert = true;
                        }
                    })
                    .catch(function (error) {
                        console.log(error);
                        vm.alertColor = "purple";
                        vm.alertMsg = "Error";
                        vm.alertTimeout = 6000;
                        vm.showAlert = true;
                    })
                vm.getData();
            },

            addAttr() {
                this.editedAttr = {
                    id: this.getGuid(),
                    type: '',
                    value: ''
                };

                this.editedItem.attributes.push(Object.assign({}, this.editedAttr));
            },

            editAttr(attr) {
                this.editedAttr = Object.assign({}, attr)
            },

            updateAttr() {

                for (var i = 0; i < this.editedItem.attributes.length; i++) {
                    if (this.editedItem.attributes[i].id == this.editedAttr.id) {
                        this.editedItem.attributes[i] = Object.assign({}, this.editedAttr);
                        break;
                    }
                }

                this.editedAttr = null;
            },

            cancelAttr() {
                this.editedAttr = null;
            },

            removeAttr(attr) {
                var index = this.editedItem.attributes.indexOf(attr);
                this.editedItem.attributes.splice(index, 1);
            },

            getGuid() {
                return([1e7]+ -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
                    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
                );
            }
        }
    })
</script>