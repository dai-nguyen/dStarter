<script type="text/x-template" id="labors-tpl">
    <v-data-table :headers="headers"
                  :items="items"
                  :options.sync="options"
                  :server-items-length="totalItems"
                  :loading="loading"
                  class="elevation-1">

        <template v-slot:top>
            <v-toolbar flat color="white">
                <v-toolbar-title>Labors</v-toolbar-title>
                <v-spacer></v-spacer>

                <v-dialog v-model="dialog" fullscreen hide-overlay transition="dialog-bottom-transition">
                    <template v-slot:activator="{ on }">
                        <v-btn color="primary" dar class="mb-2" v-on="on">Add</v-btn>
                    </template>
                    <v-card>
                        <v-toolbar dark color="primary">
                            <v-btn icon dark v-on:click="close">
                                <v-icon>mdi-close</v-icon>
                            </v-btn>
                            <v-toolbar-title>{{ formTitle }}</v-toolbar-title>
                            <v-spacer></v-spacer>
                            <v-toolbar-items>
                                <v-btn dark text
                                       v-on:click="save"
                                       :disabled="!valid">Save</v-btn>
                            </v-toolbar-items>
                        </v-toolbar>

                        <v-container>
                            <v-form v-model="valid" ref="form" lazy-validation>
                                <v-text-field v-model="editedItem.description"
                                              :rules="descriptionRules"
                                              :counter="8000"
                                              label="Description"
                                              required>
                                </v-text-field>

                                <v-text-field v-model="editedItem.hour"
                                              :rules="hourRules"
                                              :counter="2"
                                              label="Hour"
                                              required>
                                </v-text-field>

                                <v-text-field v-model="editedItem.minute"
                                              :rules="minuteRules"
                                              :counter="2"
                                              label="Minute"
                                              required>
                                </v-text-field>

                            </v-form>
                        </v-container>

                    </v-card>
                </v-dialog>

            </v-toolbar>
        </template>

        <template v-slot:item.action="{ item }">
            <v-icon small class="mr-2" v-on:click="view(item)">mdi-pencil</v-icon>
        </template>
        <template v-slot:no-data>
            <v-btn color="primary" v-on:click="getData()">Reset</v-btn>
        </template>
    </v-data-table>
</script>

<script>
    Vue.component('labors-component', {
        props: ['ticketid'],
        template: '#labors-tpl',
        data() {
            return {
                items: [],
                totalItems: 0,
                loading: true,
                options: {
                    page: 1,
                    itemPerPage: 10,
                    sortBy: ['dateCreated'],
                    sortDesc: [false],
                    groupBy: [],
                    groupDesc: [],
                    multiSort: false,
                    mustSort: false,
                    ticketId: this.ticketid,
                    search: ''
                },
                headers: [
                    { text: 'Date Created', value: 'dateCreated' },
                    { text: 'Time', value: 'hourMinute', sortable: false },
                    { text: 'Description', value: 'shortDescription', sortable: false },
                    { text: 'Action', value: 'action', sortable: false }
                ],
                valid: false,
                dialog: false,
                editedIndex: -1,
                editedItem: {
                    description: '',
                    hour: 0,
                    minute: 0
                },
                defaultItem: {
                    description: '',
                    hour: 0,
                    minute: 0
                },
                descriptionRules: [
                    v => !!v || 'Description is required',
                    v => v.length <= 8000 || 'Description must be less than 8001 characters'
                ],
            }
        },
        watch: {
            options: {
                handler() {
                    this.getData();
                }
            },
        },
        methods: {

            getData () {
                this.loading = true;
                console.log('option', this.options);
                axios
                    .post('@Url.Action("LoadData", "Labors")', this.options)
                    .then(response => {
                        this.items = response.data.result.data;
                        this.totalItems = response.data.result.total;
                        this.loading = false;
                        //console.log(response.data.result.data);
                    });
            },

            editItem(item) {
                this.editedIndex = this.items.indexOf(item);

                axios
                    .get('@Url.Action("GetData", "Labors")/' + item.id)
                    .then(response => {
                        //console.log('editedItem', response.data);

                        if (response.data.result != null) {
                            this.editedItem = Object.assign({}, response.data.result);
                            this.dialog = true;
                        }
                    });
            },

            deleteItem(item) {
                if (confirm('Are you sure you want to delete this labor?')) {
                    var vm = this;

                    axios.delete('@Url.Action("Delete", "Labors")/' + item.id)
                        .then(function (response) {
                            console.log(response);

                            if (response.data.result) {
                                vm.alertColor = "success";
                                vm.alertMsg = "Saved";
                                vm.alertTimeout = 6000;
                                vm.showAlert = true;

                                vm.getData();
                            }
                            else {
                                vm.alertColor = "purple";
                                vm.alertMsg = "Error";
                                vm.alertTimeout = 6000;
                                vm.showAlert = true;
                            }
                        });
                }
            },

            close() {
                this.dialog = false;
                setTimeout(() => {
                    this.editedItem = Object.assign({}, this.defaultItem);
                    this.editedIndex = -1;
                }, 300)
            },

            save(e) {
                e.preventDefault();
                var vm = this;

                axios.post('@Url.Action("UpsertData", "Labors")', this.editedItem)
                    .then(function (response) {
                        vm.editedIndex = -1;

                        if (response.data.result != null) {
                            vm.alertColor = "success";
                            vm.alertMsg = "Saved";
                            vm.alertTimeout = 6000;
                            vm.showAlert = true;
                            vm.close();

                            vm.getData();
                        }
                        else {
                            vm.alertColor = "purple";
                            vm.alertMsg = "Error";
                            vm.alertTimeout = 6000;
                            vm.showAlert = true;
                        }
                    })
                    .catch(function (error) {
                        console.log(error);
                        vm.alertColor = "purple";
                        vm.alertMsg = "Error";
                        vm.alertTimeout = 6000;
                        vm.showAlert = true;
                    })
                vm.getData();
            }
        }
    })
</script>