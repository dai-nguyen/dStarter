@{
    ViewData["Title"] = "Roles";
}

<partial name="~/Views/Shared/_CustomAttributeComponent.cshtml" />

<div id="appDiv">
    <v-app>

        <partial name="~/Views/Shared/_Alert.cshtml" />

        <v-data-table :headers="headers"
                      :items="items"
                      :options.sync="options"
                      :server-items-length="totalItems"
                      :loading="loading"
                      class="elevation-1">

            <template v-slot:top>
                <v-toolbar flat color="white">
                    <v-toolbar-title>Roles</v-toolbar-title>
                    @*<v-divider class="mx-4" insert vertical></v-divider>*@
                    <v-spacer></v-spacer>
                    <v-text-field v-model="search"
                                  v-on:keyup.enter="searchEntered"
                                  append-icon="mdi-magnify"
                                  label="Search"
                                  single-line
                                  hide-details></v-text-field>
                    <v-spacer></v-spacer>

                    <partial name="~/Views/Roles/_Role.cshtml" />

                </v-toolbar>
            </template>

            <template v-slot:item.action="{ item }">
                <v-icon small class="mr-2" v-on:click="editItem(item)">mdi-pencil</v-icon>
                <v-icon small v-on:click="deleteItem(item)">mdi-delete</v-icon>
            </template>
            <template v-slot:no-data>
                <v-btn color="primary" v-on:click="getData()">Reset</v-btn>
            </template>
        </v-data-table>
    </v-app>
</div>

<script>
    new Vue({
        el: '#appDiv',
        vuetify: new Vuetify(),
        data: {
            showPassword: false,
            items: [],
            totalItems: 0,
            loading: true,
            showAlert: false,
            alertMsg: "",
            alertColor: '',
            alertTimeout: 6000,
            options: {
                page: 1,
                itemPerPage: 10,
                sortBy: ['name'],
                sortDesc: [false],
                groupBy: [],
                groupDesc: [],
                multiSort: false,
                mustSort: false,
                search: ''
            },
            search: '',
            headers: [
                { text: 'Name', value: 'name' },
                { text: 'Date Updated', value: 'dateUpdatedFormatted' },
                { text: 'Updated By', value: 'updatedBy' },
                { text: 'Action', value: 'action', sortable: false }
            ],
            valid: false,
            dialog: false,
            editedIndex: -1,
            editedItem: {
                name: '',
                customAttributes: [],
            },
            defaultItem: {
                name: [],
                customAttributes: [],
            },
            nameRules: [
                v => !!v || 'Name is required',
                v => v.length <= 50 || 'Name must be less than 51 characters'
            ],
            editedAttr: null,
            
        },
        computed: {
            formTitle() {
                return this.editedIndex === -1 ? 'New Role' : 'Edit Role';
            }
        },
        watch: {
            options: {
                handler() {
                    this.getData();
                }
            },
            dialog(val) {

                val || this.close();
            }
        },
        created() {
            //this.getData();
        },
        methods: {

            getData () {
                this.loading = true;
                axios
                    .post('@Url.Action("LoadData", "Roles")', this.options)
                    .then(response => {
                        this.items = response.data.result.data;
                        this.totalItems = response.data.result.total;
                        this.loading = false;
                        //console.log(response.data.result.data);
                    });
            },

            editItem (item) {
                this.editedIndex = this.items.indexOf(item);
                //this.editedItem = Object.assign({}, item);
                //this.dialog = true;

                axios
                    .get('@Url.Action("GetData", "Roles")/' + item.id)
                    .then(response => {
                        //console.log('editedItem', response.data);

                        if (response.data.result != null) {
                            this.editedItem = Object.assign({}, response.data.result);
                            this.dialog = true;
                        }
                    });
            },

            deleteItem (item) {
                //const index = this.items.indexOf(item);
                if (confirm('Are you sure you want to delete this role?')) {
                    var vm = this;

                    axios.delete('@Url.Action("Delete", "Roles")/' + item.id)
                        .then(function (response) {
                            console.log(response);

                            if (response.data.result) {
                                vm.alertColor = "success";
                                vm.alertMsg = "Saved";
                                vm.alertTimeout = 6000;
                                vm.showAlert = true;

                                vm.getData();
                            }
                            else {
                                vm.alertColor = "purple";
                                vm.alertMsg = "Error";
                                vm.alertTimeout = 6000;
                                vm.showAlert = true;
                            }
                        });
                }
            },

            close () {
                this.dialog = false;
                setTimeout(() => {
                    this.editedItem = Object.assign({}, this.defaultItem);
                    this.editedIndex = -1;
                }, 300)
            },

            save (e) {
                e.preventDefault();
                var vm = this;

                axios.post('@Url.Action("Upsert", "Roles")', this.editedItem)
                    .then(function (response) {
                        vm.editedIndex = -1;

                        if (response.data.result != null) {
                            vm.alertColor = "success";
                            vm.alertMsg = "Saved";
                            vm.alertTimeout = 6000;
                            vm.showAlert = true;
                            vm.close();

                            vm.getData();
                        }
                        else {
                            vm.alertColor = "purple";
                            vm.alertMsg = "Error";
                            vm.alertTimeout = 6000;
                            vm.showAlert = true;
                        }
                    })
                    .catch(function (error) {
                        console.log(error);
                        vm.alertColor = "purple";
                        vm.alertMsg = "Error";
                        vm.alertTimeout = 6000;
                        vm.showAlert = true;
                    })
                vm.getData();
            },

            searchEntered() {
                this.options.search = this.search;

                if (this.options.search.length == 0) {
                    this.getData();
                }
            }
        }
    })
</script>